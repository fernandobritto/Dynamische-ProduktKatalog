<?php
/**
 * ProductApiInterface
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Produkt Katalog
 *
 * This API will be used by e-commerce users who wish to perform better.
 *
 * OpenAPI spec version: 1.0.1
 * Contact: apiteam@infoenter.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use Swagger\Server\Model\ApiResponse;
use Swagger\Server\Model\Product;

/**
 * ProductApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  Swagger\Server\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
interface ProductApiInterface
{

    /**
     * Sets authentication method productstore_auth
     *
     * @param string $value Value of the productstore_auth authentication method.
     *
     * @return void
     */
    public function setproductstore_auth($value);

    /**
     * Sets authentication method api_key
     *
     * @param string $value Value of the api_key authentication method.
     *
     * @return void
     */
    public function setapi_key($value);

    /**
     * Operation addproduct
     *
     * Add a new product to the store
     *
     * @param  Swagger\Server\Model\Product $body  product object that needs to be added to the store (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function addproduct(Product $body, &$responseCode, array &$responseHeaders);

    /**
     * Operation deleteproduct
     *
     * Deletes a product
     *
     * @param  int $productId  product id to delete (required)
     * @param  string $apiKey   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function deleteproduct($productId, $apiKey = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation findproductsByStatus
     *
     * Finds products by status
     *
     * @param  string[] $status  Status values that need to be considered for filter (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\Product[]
     *
     */
    public function findproductsByStatus(array $status, &$responseCode, array &$responseHeaders);

    /**
     * @deprecated
     * Operation findproductsByTags
     *
     * Finds products by tags
     *
     * @param  string[] $tags  Tags to filter by (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\Product[]
     *
     */
    public function findproductsByTags(array $tags, &$responseCode, array &$responseHeaders);

    /**
     * Operation getproductById
     *
     * Find product by ID
     *
     * @param  int $productId  ID of product to return (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\Product[]
     *
     */
    public function getproductById($productId, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateproduct
     *
     * Update an existing product
     *
     * @param  Swagger\Server\Model\Product $body  product object that needs to be added to the store (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function updateproduct(Product $body, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateproductWithForm
     *
     * Updates a product in the store with form data
     *
     * @param  int $productId  ID of product that needs to be updated (required)
     * @param  string $name  Updated name of the product (optional)
     * @param  string $status  Updated status of the product (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function updateproductWithForm($productId, $name = null, $status = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation uploadFile
     *
     * uploads an image
     *
     * @param  int $productId  ID of product to update (required)
     * @param  string $additionalMetadata  Additional data to pass to server (optional)
     * @param  UploadedFile $file  file to upload (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return Swagger\Server\Model\ApiResponse[]
     *
     */
    public function uploadFile($productId, $additionalMetadata = null, UploadedFile $file = null, &$responseCode, array &$responseHeaders);
}
